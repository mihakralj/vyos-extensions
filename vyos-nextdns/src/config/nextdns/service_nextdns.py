#!/usr/bin/env python3
import os
import re
import subprocess
import sys

class ConfigError(Exception):
    pass

def get_config_from_cli():
    config = {}
    try:
        command = 'eval "$(/usr/bin/cli-shell-api getEditResetEnv)" && /usr/bin/cli-shell-api showCfg service nextdns'
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            executable='/bin/bash'
        )

        if "Specified configuration path is not valid" in result.stdout or \
           "Specified configuration path is not valid" in result.stderr:
            return {}

        if result.returncode != 0:
            result.check_returncode()

        output = result.stdout.strip()
        if not output:
            return {}

        lines = output.split('\n')
        for line in lines:
            clean_line = line.lstrip(' +->').strip()
            if not clean_line:
                continue
            match = re.match(r'(\S+)\s*(.*)', clean_line)
            if match:
                key, value = match.groups()
                if not value:
                    config[key] = True
                    continue
                if key in config:
                    if isinstance(config[key], list):
                        config[key].append(value)
                    else:
                        config[key] = [config[key], value]
                else:
                    config[key] = value

        return config
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        raise Exception(f"Failed to execute cli-shell-api: {e}")
    except Exception as e:
        raise Exception(f"An unexpected error occurred in get_config_from_cli: {e}")

def generate_conf(config):
    output_file = "/config/nextdns/nextdns.conf"
    tmp_file = "/tmp/nextdns.conf.tmp"

    if not config:
        if os.path.isfile(output_file):
            os.system(f"sudo rm -f {output_file}")
        return

    lines = ["# Generated by VyOS"]
    for key, value in config.items():
        if isinstance(value, list):
            for item in value:
                lines.append(f"{key} {item}")
        elif isinstance(value, bool):
            if value:
                lines.append(f"{key} true")
        elif isinstance(value, str):
            lines.append(f"{key} {value}")

    with open(tmp_file, 'w') as f:
        f.write("\n".join(lines) + "\n")
    os.system(f"sudo mv {tmp_file} {output_file}")

def apply_service_state(config):
    is_commit_context = os.getenv('VYOS_COMMIT_SCRIPT') is not None

    if not config:
        if is_commit_context:
            print("No NextDNS configuration found. Service will be stopped.", file=sys.stderr)
            print("Use 'set service nextdns profile <ID>' to configure.", file=sys.stderr)
        os.system("sudo systemctl stop nextdns.service")
        conf_file = "/config/nextdns/nextdns.conf"
        if os.path.isfile(conf_file):
            os.remove(conf_file)
        return

    if 'profile' not in config:
        if is_commit_context:
            raise ConfigError("Configuration is invalid: 'profile' is a required parameter.")
        else:
            print("NextDNS profile not configured. Service will not be started.", file=sys.stderr)
            return
    os.system("sudo systemctl restart nextdns.service")

if __name__ == "__main__":
    try:
        c = get_config_from_cli()
        generate_conf(c)
        apply_service_state(c)
    except ConfigError as e:
        print(e, file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)
